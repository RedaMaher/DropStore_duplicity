=== modified file 'bin/duplicity'
--- bin/duplicity	2015-05-08 12:28:47 +0000
+++ bin/duplicity	2015-03-09 18:50:58 +0000
@@ -458,7 +458,6 @@

     # Upload the collection summary.
     # bytes_written += write_manifest(mf, backup_type, backend)
-    mf.set_files_changed_info(diffdir.stats.get_delta_entries_file())

     return bytes_written

@@ -1451,10 +1450,7 @@
     elif action == "list-current":
         list_current(col_stats)
     elif action == "collection-status":
-        if not globals.file_changed:
-            log.PrintCollectionStatus(col_stats, True)
-        else:
-            log.PrintCollectionFileChangedStatus(col_stats, globals.file_changed, True)
+        log.PrintCollectionStatus(col_stats, True)
     elif action == "cleanup":
         cleanup(col_stats)
     elif action == "remove-old":

=== modified file 'bin/duplicity.1'
--- bin/duplicity.1	2015-05-08 12:28:47 +0000
+++ bin/duplicity.1	2015-04-12 12:57:14 +0000
@@ -21,7 +21,7 @@
 source_url target_directory

 .B duplicity collection-status
-.I [options] [--file-changed <relpath>]
+.I [options]
 target_url

 .B duplicity list-current-files
@@ -180,7 +180,7 @@
 option enables data comparison (see below).

 .TP
-.BI "collection-status " "[--file-changed <relpath>]" "<url>"
+.BI "collection-status " "<url>"
 Summarize the status of the backup repository by printing the chains
 and sets found, and the number of volumes in each.

@@ -423,15 +423,6 @@
 argument for more information.

 .TP
-.BI "--file-changed " path
-This option may be given in collection-status mode, causing only
-.I path
-status to be collect instead of the entire contents of the backup archive.
-.I path
-should be given relative to the root of the directory backed up.
-
-
-.TP
 .BI "--file-prefix, --file-prefix-manifest, --file-prefix-archive, --file-prefix-signature
 Adds a prefix to all files, manifest files, archive files, and/or signature files.


=== modified file 'duplicity/collections.py'
--- duplicity/collections.py	2015-05-08 12:28:47 +0000
+++ duplicity/collections.py	2015-01-31 23:30:49 +0000
@@ -60,7 +60,6 @@
         self.end_time = None  # will be set if inc
         self.partial = False  # true if a partial backup
         self.encrypted = False  # true if an encrypted backup
-        self.files_changed = []

     def is_complete(self):
         """
@@ -124,10 +123,6 @@
         self.encrypted = bool(pr.encrypted)
         self.info_set = True

-    def set_files_changed(self):
-        mf = self.get_manifest()
-        self.files_changed = mf.get_files_changed()
-
     def set_manifest(self, remote_filename):
         """
         Add local and remote manifest filenames to backup set
@@ -145,8 +140,6 @@
                     and pr.end_time == self.end_time):
                 self.local_manifest_path = \
                     globals.archive_dir.append(local_filename)
-
-                self.set_files_changed()
                 break

     def delete(self):
@@ -279,9 +272,6 @@
             return self.end_time
         assert 0, "Neither self.time nor self.end_time set"

-    def get_files_changed(self):
-        return self.files_changed
-
     def __len__(self):
         """
         Return the number of volumes in the set
@@ -1163,48 +1153,3 @@
             old_sets = filter(lambda s: s.get_time() < t, chain.get_all_sets())
             result_sets.extend(old_sets)
         return self.sort_sets(result_sets)
-
-    def get_file_changed_record(self, filepath):
-        """
-        Returns time line of specified file changed
-        """
-        if not self.matched_chain_pair:
-            return ""
-
-        all_backup_set = self.matched_chain_pair[1].get_all_sets()
-        specified_file_backup_set = []
-        specified_file_backup_type = []
-
-        for bs in all_backup_set:
-            filelist = [fileinfo[1] for fileinfo in bs.get_files_changed()]
-            if filepath in filelist:
-                specified_file_backup_set.append(bs)
-                index = filelist.index(filepath)
-                specified_file_backup_type.append(bs.get_files_changed()[index][0])
-
-        return FileChangedStatus(filepath, list(zip(specified_file_backup_type, specified_file_backup_set)))
-
-
-class FileChangedStatus:
-    def __init__(self, filepath, fileinfo_list):
-        self.filepath = filepath
-        self.fileinfo_list = fileinfo_list
-
-    def __unicode__(self):
-        set_schema = "%20s   %30s  %20s"
-        l = ["-------------------------",
-             _("File: %s") % (self.filepath),
-             _("Total number of backup: %d") % len(self.fileinfo_list),
-             set_schema % (_("Type of backup set:"), _("Time:"), _("Type of file change:"))]
-
-        for s in self.fileinfo_list:
-            backup_type = s[0]
-            backup_set = s[1]
-            if backup_set.time:
-                type = _("Full")
-            else:
-                type = _("Incremental")
-            l.append(set_schema % (type, dup_time.timetopretty(backup_set.get_time()), backup_type.title()))
-
-        l.append("-------------------------")
-        return "\n".join(l)

=== modified file 'duplicity/commandline.py'
--- duplicity/commandline.py	2015-05-08 12:28:47 +0000
+++ duplicity/commandline.py	2015-03-13 12:22:29 +0000
@@ -614,11 +614,6 @@
     parser.add_option("--volsize", type="int", action="callback", metavar=_("number"),
                       callback=lambda o, s, v, p: setattr(p.values, "volsize", v * 1024 * 1024))

-    # If set, collect only the file status, not the whole root.
-    parser.add_option("--file-changed", action="callback", type="file",
-                      metavar=_("path"), dest="file_changed",
-                      callback=lambda o, s, v, p: setattr(p.values, "file_changed", v.rstrip('/')))
-
     # parse the options
     (options, args) = parser.parse_args()


=== modified file 'duplicity/diffdir.py'
--- duplicity/diffdir.py	2015-05-08 12:28:47 +0000
+++ duplicity/diffdir.py	2015-02-01 17:37:37 +0000
@@ -209,7 +209,7 @@
                     ti = ROPath(sig_path.index).get_tarinfo()
                     ti.name = "deleted/" + "/".join(sig_path.index)
                     sigTarFile.addfile(ti)
-                stats.add_deleted_file(sig_path)
+                stats.add_deleted_file()
                 yield ROPath(sig_path.index)
         elif not sig_path or new_path != sig_path:
             # Must calculate new signature and create delta

=== modified file 'duplicity/globals.py'
--- duplicity/globals.py	2015-05-08 12:28:47 +0000
+++ duplicity/globals.py	2014-10-30 17:22:39 +0000
@@ -284,6 +284,3 @@

 # Whether to enable gio backend
 use_gio = False
-
-# If set, collect only the file status, not the whole root.
-file_changed = None

=== modified file 'duplicity/log.py'
--- duplicity/log.py	2015-05-08 12:28:47 +0000
+++ duplicity/log.py	2015-01-31 23:30:49 +0000
@@ -220,11 +220,6 @@
         '\n' + '\n'.join(col_stats.to_log_info()), force_print)


-def PrintCollectionFileChangedStatus(col_stats, filepath, force_print=False):
-    """Prints a collection status to the log"""
-    Log(unicode(col_stats.get_file_changed_record(filepath)), 8, InfoCode.collection_status, None, force_print)
-
-
 def Notice(s):
     """Shortcut used for notice messages (verbosity 3, the default)."""
     Log(s, NOTICE)

=== modified file 'duplicity/manifest.py'
--- duplicity/manifest.py	2015-05-08 12:28:47 +0000
+++ duplicity/manifest.py	2015-01-31 23:30:49 +0000
@@ -55,7 +55,6 @@
         self.local_dirname = None
         self.volume_info_dict = {}  # dictionary vol numbers -> vol infos
         self.fh = fh
-        self.files_changed = []

     def set_dirinfo(self):
         """
@@ -111,15 +110,6 @@
                          "--allow-source-mismatch switch to avoid seeing this "
                          "message"), code, code_extra)

-    def set_files_changed_info(self, files_changed):
-        if files_changed:
-            self.files_changed = files_changed
-
-        if self.fh:
-            self.fh.write("Filelist %d\n" % len(self.files_changed))
-            for fileinfo in self.files_changed:
-                self.fh.write("    %-7s  %s\n" % (fileinfo[1], Quote(fileinfo[0])))
-
     def add_volume_info(self, vi):
         """
         Add volume info vi to manifest and write to manifest
@@ -161,10 +151,6 @@
         if self.local_dirname:
             result += "Localdir %s\n" % Quote(self.local_dirname)

-        result += "Filelist %d\n" % len(self.files_changed)
-        for fileinfo in self.files_changed:
-            result += "    %-7s  %s\n" % (fileinfo[1], Quote(fileinfo[0]))
-
         vol_num_list = self.volume_info_dict.keys()
         vol_num_list.sort()

@@ -192,20 +178,6 @@
         self.hostname = get_field("hostname")
         self.local_dirname = get_field("localdir")

-        # Get file changed list
-        filelist_regexp = re.compile("(^|\\n)filelist\\s([0-9]+)\\n(.*?)(\\nvolume\\s|$)", re.I | re.S)
-        match = filelist_regexp.search(s)
-        filecount = 0
-        if match:
-            filecount = int(match.group(2))
-        if filecount > 0:
-            def parse_fileinfo(line):
-                fileinfo = line.strip().split()
-                return (fileinfo[0], ''.join(fileinfo[1:]))
-
-            self.files_changed = list(map(parse_fileinfo, match.group(3).split('\n')))
-        assert filecount == len(self.files_changed)
-
         next_vi_string_regexp = re.compile("(^|\\n)(volume\\s.*?)"
                                            "(\\nvolume\\s|$)", re.I | re.S)
         starting_s_index = 0
@@ -228,9 +200,6 @@
             self.del_volume_info(i)
         return self

-    def get_files_changed(self):
-        return self.files_changed
-
     def __eq__(self, other):
         """
         Two manifests are equal if they contain the same volume infos

=== modified file 'duplicity/statistics.py'
--- duplicity/statistics.py	2015-05-08 12:28:47 +0000
+++ duplicity/statistics.py	2015-02-01 17:37:37 +0000
@@ -306,7 +306,6 @@
             self.__dict__[attr] = 0
         self.Errors = 0
         self.StartTime = time.time()
-        self.files_changed = []

     def add_new_file(self, path):
         """Add stats of new file path to statistics"""
@@ -316,7 +315,6 @@
         self.NewFiles += 1
         self.NewFileSize += filesize
         self.DeltaEntries += 1
-        self.add_delta_entries_file(path, 'new')

     def add_changed_file(self, path):
         """Add stats of file that has changed since last backup"""
@@ -326,13 +324,11 @@
         self.ChangedFiles += 1
         self.ChangedFileSize += filesize
         self.DeltaEntries += 1
-        self.add_delta_entries_file(path, 'changed')

-    def add_deleted_file(self, path):
+    def add_deleted_file(self):
         """Add stats of file no longer in source directory"""
         self.DeletedFiles += 1  # can't add size since not available
         self.DeltaEntries += 1
-        self.add_delta_entries_file(path, 'deleted')

     def add_unchanged_file(self, path):
         """Add stats of file that hasn't changed since last backup"""
@@ -343,10 +339,3 @@
     def close(self):
         """End collection of data, set EndTime"""
         self.EndTime = time.time()
-
-    def add_delta_entries_file(self, path, action_type):
-        if path.isreg():
-            self.files_changed.append((path.get_relative_path(), action_type))
-
-    def get_delta_entries_file(self):
-        return self.files_changed

=== modified file 'testing/unit/test_manifest.py'
--- testing/unit/test_manifest.py	2015-05-08 12:28:47 +0000
+++ testing/unit/test_manifest.py	2015-01-31 23:30:49 +0000
@@ -89,7 +89,6 @@

         self.set_global('local_path', path.Path("Foobar"))
         m.set_dirinfo()
-        m.set_files_changed_info([])

         s = m.to_string()
         # print "---------\n%s\n---------" % s

